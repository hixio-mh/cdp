// Code generated by cdpgen. DO NOT EDIT.

package tracing

import (
	"encoding/json"
	"errors"
)

// MemoryDumpConfig Configuration for memory dump. Used only when
// "memory-infra" category is enabled.
type MemoryDumpConfig []byte

// MarshalJSON copies behavior of json.RawMessage.
func (m MemoryDumpConfig) MarshalJSON() ([]byte, error) {
	if m == nil {
		return []byte("null"), nil
	}
	return m, nil
}

// UnmarshalJSON copies behavior of json.RawMessage.
func (m *MemoryDumpConfig) UnmarshalJSON(data []byte) error {
	if m == nil {
		return errors.New("tracing.MemoryDumpConfig: UnmarshalJSON on nil pointer")
	}
	*m = append((*m)[0:0], data...)
	return nil
}

var _ json.Marshaler = (*MemoryDumpConfig)(nil)
var _ json.Unmarshaler = (*MemoryDumpConfig)(nil)

// TraceConfig
type TraceConfig struct {
	// RecordMode Controls how the trace buffer stores data.
	//
	// Values: "recordUntilFull", "recordContinuously", "recordAsMuchAsPossible", "echoToConsole".
	RecordMode           *string          `json:"recordMode,omitempty"`
	EnableSampling       *bool            `json:"enableSampling,omitempty"`       // Turns on JavaScript stack sampling.
	EnableSystrace       *bool            `json:"enableSystrace,omitempty"`       // Turns on system tracing.
	EnableArgumentFilter *bool            `json:"enableArgumentFilter,omitempty"` // Turns on argument filter.
	IncludedCategories   []string         `json:"includedCategories,omitempty"`   // Included category filters.
	ExcludedCategories   []string         `json:"excludedCategories,omitempty"`   // Excluded category filters.
	SyntheticDelays      []string         `json:"syntheticDelays,omitempty"`      // Configuration to synthesize the delays in tracing.
	MemoryDumpConfig     MemoryDumpConfig `json:"memoryDumpConfig,omitempty"`     // Configuration for memory dump triggers. Used only when "memory-infra" category is enabled.
}

// StreamFormat Data format of a trace. Can be either the legacy JSON format
// or the protocol buffer format. Note that the JSON format will be deprecated
// soon.
type StreamFormat string

// StreamFormat as enums.
const (
	StreamFormatNotSet StreamFormat = ""
	StreamFormatJSON   StreamFormat = "json"
	StreamFormatProto  StreamFormat = "proto"
)

func (e StreamFormat) Valid() bool {
	switch e {
	case "json", "proto":
		return true
	default:
		return false
	}
}

func (e StreamFormat) String() string {
	return string(e)
}

// StreamCompression Compression type to use for traces returned via streams.
type StreamCompression string

// StreamCompression as enums.
const (
	StreamCompressionNotSet StreamCompression = ""
	StreamCompressionNone   StreamCompression = "none"
	StreamCompressionGzip   StreamCompression = "gzip"
)

func (e StreamCompression) Valid() bool {
	switch e {
	case "none", "gzip":
		return true
	default:
		return false
	}
}

func (e StreamCompression) String() string {
	return string(e)
}

// MemoryDumpLevelOfDetail Details exposed when memory request explicitly
// declared. Keep consistent with memory_dump_request_args.h and
// memory_instrumentation.mojom
type MemoryDumpLevelOfDetail string

// MemoryDumpLevelOfDetail as enums.
const (
	MemoryDumpLevelOfDetailNotSet     MemoryDumpLevelOfDetail = ""
	MemoryDumpLevelOfDetailBackground MemoryDumpLevelOfDetail = "background"
	MemoryDumpLevelOfDetailLight      MemoryDumpLevelOfDetail = "light"
	MemoryDumpLevelOfDetailDetailed   MemoryDumpLevelOfDetail = "detailed"
)

func (e MemoryDumpLevelOfDetail) Valid() bool {
	switch e {
	case "background", "light", "detailed":
		return true
	default:
		return false
	}
}

func (e MemoryDumpLevelOfDetail) String() string {
	return string(e)
}

// Backend Backend type to use for tracing. `chrome` uses the
// Chrome-integrated tracing service and is supported on all platforms.
// `system` is only supported on Chrome OS and uses the Perfetto system tracing
// service. `auto` chooses `system` when the perfettoConfig provided to
// Tracing.start specifies at least one non-Chrome data source; otherwise uses
// `chrome`.
type Backend string

// Backend as enums.
const (
	BackendNotSet Backend = ""
	BackendAuto   Backend = "auto"
	BackendChrome Backend = "chrome"
	BackendSystem Backend = "system"
)

func (e Backend) Valid() bool {
	switch e {
	case "auto", "chrome", "system":
		return true
	default:
		return false
	}
}

func (e Backend) String() string {
	return string(e)
}
