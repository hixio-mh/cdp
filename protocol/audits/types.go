// Code generated by cdpgen. DO NOT EDIT.

package audits

import (
	"github.com/mafredri/cdp/protocol/dom"
	"github.com/mafredri/cdp/protocol/network"
	"github.com/mafredri/cdp/protocol/page"
	"github.com/mafredri/cdp/protocol/runtime"
)

// AffectedCookie Information about a cookie that is affected by an inspector
// issue.
type AffectedCookie struct {
	Name   string `json:"name"`   // The following three properties uniquely identify a cookie
	Path   string `json:"path"`   // No description.
	Domain string `json:"domain"` // No description.
}

// AffectedRequest Information about a request that is affected by an
// inspector issue.
type AffectedRequest struct {
	RequestID network.RequestID `json:"requestId"`     // The unique request id.
	URL       *string           `json:"url,omitempty"` // No description.
}

// AffectedFrame Information about the frame affected by an inspector issue.
type AffectedFrame struct {
	FrameID page.FrameID `json:"frameId"` // No description.
}

// SameSiteCookieExclusionReason
type SameSiteCookieExclusionReason string

// SameSiteCookieExclusionReason as enums.
const (
	SameSiteCookieExclusionReasonNotSet                                 SameSiteCookieExclusionReason = ""
	SameSiteCookieExclusionReasonExcludeSameSiteUnspecifiedTreatedAsLax SameSiteCookieExclusionReason = "ExcludeSameSiteUnspecifiedTreatedAsLax"
	SameSiteCookieExclusionReasonExcludeSameSiteNoneInsecure            SameSiteCookieExclusionReason = "ExcludeSameSiteNoneInsecure"
	SameSiteCookieExclusionReasonExcludeSameSiteLax                     SameSiteCookieExclusionReason = "ExcludeSameSiteLax"
	SameSiteCookieExclusionReasonExcludeSameSiteStrict                  SameSiteCookieExclusionReason = "ExcludeSameSiteStrict"
)

func (e SameSiteCookieExclusionReason) Valid() bool {
	switch e {
	case "ExcludeSameSiteUnspecifiedTreatedAsLax", "ExcludeSameSiteNoneInsecure", "ExcludeSameSiteLax", "ExcludeSameSiteStrict":
		return true
	default:
		return false
	}
}

func (e SameSiteCookieExclusionReason) String() string {
	return string(e)
}

// SameSiteCookieWarningReason
type SameSiteCookieWarningReason string

// SameSiteCookieWarningReason as enums.
const (
	SameSiteCookieWarningReasonNotSet                                  SameSiteCookieWarningReason = ""
	SameSiteCookieWarningReasonWarnSameSiteUnspecifiedCrossSiteContext SameSiteCookieWarningReason = "WarnSameSiteUnspecifiedCrossSiteContext"
	SameSiteCookieWarningReasonWarnSameSiteNoneInsecure                SameSiteCookieWarningReason = "WarnSameSiteNoneInsecure"
	SameSiteCookieWarningReasonWarnSameSiteUnspecifiedLaxAllowUnsafe   SameSiteCookieWarningReason = "WarnSameSiteUnspecifiedLaxAllowUnsafe"
	SameSiteCookieWarningReasonWarnSameSiteStrictLaxDowngradeStrict    SameSiteCookieWarningReason = "WarnSameSiteStrictLaxDowngradeStrict"
	SameSiteCookieWarningReasonWarnSameSiteStrictCrossDowngradeStrict  SameSiteCookieWarningReason = "WarnSameSiteStrictCrossDowngradeStrict"
	SameSiteCookieWarningReasonWarnSameSiteStrictCrossDowngradeLax     SameSiteCookieWarningReason = "WarnSameSiteStrictCrossDowngradeLax"
	SameSiteCookieWarningReasonWarnSameSiteLaxCrossDowngradeStrict     SameSiteCookieWarningReason = "WarnSameSiteLaxCrossDowngradeStrict"
	SameSiteCookieWarningReasonWarnSameSiteLaxCrossDowngradeLax        SameSiteCookieWarningReason = "WarnSameSiteLaxCrossDowngradeLax"
)

func (e SameSiteCookieWarningReason) Valid() bool {
	switch e {
	case "WarnSameSiteUnspecifiedCrossSiteContext", "WarnSameSiteNoneInsecure", "WarnSameSiteUnspecifiedLaxAllowUnsafe", "WarnSameSiteStrictLaxDowngradeStrict", "WarnSameSiteStrictCrossDowngradeStrict", "WarnSameSiteStrictCrossDowngradeLax", "WarnSameSiteLaxCrossDowngradeStrict", "WarnSameSiteLaxCrossDowngradeLax":
		return true
	default:
		return false
	}
}

func (e SameSiteCookieWarningReason) String() string {
	return string(e)
}

// SameSiteCookieOperation
type SameSiteCookieOperation string

// SameSiteCookieOperation as enums.
const (
	SameSiteCookieOperationNotSet     SameSiteCookieOperation = ""
	SameSiteCookieOperationSetCookie  SameSiteCookieOperation = "SetCookie"
	SameSiteCookieOperationReadCookie SameSiteCookieOperation = "ReadCookie"
)

func (e SameSiteCookieOperation) Valid() bool {
	switch e {
	case "SetCookie", "ReadCookie":
		return true
	default:
		return false
	}
}

func (e SameSiteCookieOperation) String() string {
	return string(e)
}

// SameSiteCookieIssueDetails This information is currently necessary, as the
// front-end has a difficult time finding a specific cookie. With this, we can
// convey specific error information without the cookie.
type SameSiteCookieIssueDetails struct {
	Cookie                 AffectedCookie                  `json:"cookie"`                   // No description.
	CookieWarningReasons   []SameSiteCookieWarningReason   `json:"cookieWarningReasons"`     // No description.
	CookieExclusionReasons []SameSiteCookieExclusionReason `json:"cookieExclusionReasons"`   // No description.
	Operation              SameSiteCookieOperation         `json:"operation"`                // Optionally identifies the site-for-cookies and the cookie url, which may be used by the front-end as additional context.
	SiteForCookies         *string                         `json:"siteForCookies,omitempty"` // No description.
	CookieURL              *string                         `json:"cookieUrl,omitempty"`      // No description.
	Request                *AffectedRequest                `json:"request,omitempty"`        // No description.
}

// MixedContentResolutionStatus
type MixedContentResolutionStatus string

// MixedContentResolutionStatus as enums.
const (
	MixedContentResolutionStatusNotSet                            MixedContentResolutionStatus = ""
	MixedContentResolutionStatusMixedContentBlocked               MixedContentResolutionStatus = "MixedContentBlocked"
	MixedContentResolutionStatusMixedContentAutomaticallyUpgraded MixedContentResolutionStatus = "MixedContentAutomaticallyUpgraded"
	MixedContentResolutionStatusMixedContentWarning               MixedContentResolutionStatus = "MixedContentWarning"
)

func (e MixedContentResolutionStatus) Valid() bool {
	switch e {
	case "MixedContentBlocked", "MixedContentAutomaticallyUpgraded", "MixedContentWarning":
		return true
	default:
		return false
	}
}

func (e MixedContentResolutionStatus) String() string {
	return string(e)
}

// MixedContentResourceType
type MixedContentResourceType string

// MixedContentResourceType as enums.
const (
	MixedContentResourceTypeNotSet         MixedContentResourceType = ""
	MixedContentResourceTypeAudio          MixedContentResourceType = "Audio"
	MixedContentResourceTypeBeacon         MixedContentResourceType = "Beacon"
	MixedContentResourceTypeCSPReport      MixedContentResourceType = "CSPReport"
	MixedContentResourceTypeDownload       MixedContentResourceType = "Download"
	MixedContentResourceTypeEventSource    MixedContentResourceType = "EventSource"
	MixedContentResourceTypeFavicon        MixedContentResourceType = "Favicon"
	MixedContentResourceTypeFont           MixedContentResourceType = "Font"
	MixedContentResourceTypeForm           MixedContentResourceType = "Form"
	MixedContentResourceTypeFrame          MixedContentResourceType = "Frame"
	MixedContentResourceTypeImage          MixedContentResourceType = "Image"
	MixedContentResourceTypeImport         MixedContentResourceType = "Import"
	MixedContentResourceTypeManifest       MixedContentResourceType = "Manifest"
	MixedContentResourceTypePing           MixedContentResourceType = "Ping"
	MixedContentResourceTypePluginData     MixedContentResourceType = "PluginData"
	MixedContentResourceTypePluginResource MixedContentResourceType = "PluginResource"
	MixedContentResourceTypePrefetch       MixedContentResourceType = "Prefetch"
	MixedContentResourceTypeResource       MixedContentResourceType = "Resource"
	MixedContentResourceTypeScript         MixedContentResourceType = "Script"
	MixedContentResourceTypeServiceWorker  MixedContentResourceType = "ServiceWorker"
	MixedContentResourceTypeSharedWorker   MixedContentResourceType = "SharedWorker"
	MixedContentResourceTypeStylesheet     MixedContentResourceType = "Stylesheet"
	MixedContentResourceTypeTrack          MixedContentResourceType = "Track"
	MixedContentResourceTypeVideo          MixedContentResourceType = "Video"
	MixedContentResourceTypeWorker         MixedContentResourceType = "Worker"
	MixedContentResourceTypeXMLHttpRequest MixedContentResourceType = "XMLHttpRequest"
	MixedContentResourceTypeXSLT           MixedContentResourceType = "XSLT"
)

func (e MixedContentResourceType) Valid() bool {
	switch e {
	case "Audio", "Beacon", "CSPReport", "Download", "EventSource", "Favicon", "Font", "Form", "Frame", "Image", "Import", "Manifest", "Ping", "PluginData", "PluginResource", "Prefetch", "Resource", "Script", "ServiceWorker", "SharedWorker", "Stylesheet", "Track", "Video", "Worker", "XMLHttpRequest", "XSLT":
		return true
	default:
		return false
	}
}

func (e MixedContentResourceType) String() string {
	return string(e)
}

// MixedContentIssueDetails
type MixedContentIssueDetails struct {
	ResourceType     MixedContentResourceType     `json:"resourceType,omitempty"` // The type of resource causing the mixed content issue (css, js, iframe, form,...). Marked as optional because it is mapped to from blink::mojom::RequestContextType, which will be replaced by network::mojom::RequestDestination
	ResolutionStatus MixedContentResolutionStatus `json:"resolutionStatus"`       // The way the mixed content issue is being resolved.
	InsecureURL      string                       `json:"insecureURL"`            // The unsafe http url causing the mixed content issue.
	MainResourceURL  string                       `json:"mainResourceURL"`        // The url responsible for the call to an unsafe url.
	Request          *AffectedRequest             `json:"request,omitempty"`      // The mixed content request. Does not always exist (e.g. for unsafe form submission urls).
	Frame            *AffectedFrame               `json:"frame,omitempty"`        // Optional because not every mixed content issue is necessarily linked to a frame.
}

// BlockedByResponseReason Enum indicating the reason a response has been
// blocked. These reasons are refinements of the net error BLOCKED_BY_RESPONSE.
type BlockedByResponseReason string

// BlockedByResponseReason as enums.
const (
	BlockedByResponseReasonNotSet                                            BlockedByResponseReason = ""
	BlockedByResponseReasonCoepFrameResourceNeedsCoepHeader                  BlockedByResponseReason = "CoepFrameResourceNeedsCoepHeader"
	BlockedByResponseReasonCoopSandboxedIFrameCannotNavigateToCoopPage       BlockedByResponseReason = "CoopSandboxedIFrameCannotNavigateToCoopPage"
	BlockedByResponseReasonCorpNotSameOrigin                                 BlockedByResponseReason = "CorpNotSameOrigin"
	BlockedByResponseReasonCorpNotSameOriginAfterDefaultedToSameOriginByCoep BlockedByResponseReason = "CorpNotSameOriginAfterDefaultedToSameOriginByCoep"
	BlockedByResponseReasonCorpNotSameSite                                   BlockedByResponseReason = "CorpNotSameSite"
)

func (e BlockedByResponseReason) Valid() bool {
	switch e {
	case "CoepFrameResourceNeedsCoepHeader", "CoopSandboxedIFrameCannotNavigateToCoopPage", "CorpNotSameOrigin", "CorpNotSameOriginAfterDefaultedToSameOriginByCoep", "CorpNotSameSite":
		return true
	default:
		return false
	}
}

func (e BlockedByResponseReason) String() string {
	return string(e)
}

// BlockedByResponseIssueDetails Details for a request that has been blocked
// with the BLOCKED_BY_RESPONSE code. Currently only used for COEP/COOP, but
// may be extended to include some CSP errors in the future.
type BlockedByResponseIssueDetails struct {
	Request      AffectedRequest         `json:"request"`                // No description.
	ParentFrame  *AffectedFrame          `json:"parentFrame,omitempty"`  // No description.
	BlockedFrame *AffectedFrame          `json:"blockedFrame,omitempty"` // No description.
	Reason       BlockedByResponseReason `json:"reason"`                 // No description.
}

// HeavyAdResolutionStatus
type HeavyAdResolutionStatus string

// HeavyAdResolutionStatus as enums.
const (
	HeavyAdResolutionStatusNotSet         HeavyAdResolutionStatus = ""
	HeavyAdResolutionStatusHeavyAdBlocked HeavyAdResolutionStatus = "HeavyAdBlocked"
	HeavyAdResolutionStatusHeavyAdWarning HeavyAdResolutionStatus = "HeavyAdWarning"
)

func (e HeavyAdResolutionStatus) Valid() bool {
	switch e {
	case "HeavyAdBlocked", "HeavyAdWarning":
		return true
	default:
		return false
	}
}

func (e HeavyAdResolutionStatus) String() string {
	return string(e)
}

// HeavyAdReason
type HeavyAdReason string

// HeavyAdReason as enums.
const (
	HeavyAdReasonNotSet            HeavyAdReason = ""
	HeavyAdReasonNetworkTotalLimit HeavyAdReason = "NetworkTotalLimit"
	HeavyAdReasonCPUTotalLimit     HeavyAdReason = "CpuTotalLimit"
	HeavyAdReasonCPUPeakLimit      HeavyAdReason = "CpuPeakLimit"
)

func (e HeavyAdReason) Valid() bool {
	switch e {
	case "NetworkTotalLimit", "CpuTotalLimit", "CpuPeakLimit":
		return true
	default:
		return false
	}
}

func (e HeavyAdReason) String() string {
	return string(e)
}

// HeavyAdIssueDetails
type HeavyAdIssueDetails struct {
	Resolution HeavyAdResolutionStatus `json:"resolution"` // The resolution status, either blocking the content or warning.
	Reason     HeavyAdReason           `json:"reason"`     // The reason the ad was blocked, total network or cpu or peak cpu.
	Frame      AffectedFrame           `json:"frame"`      // The frame that was blocked.
}

// ContentSecurityPolicyViolationType
type ContentSecurityPolicyViolationType string

// ContentSecurityPolicyViolationType as enums.
const (
	ContentSecurityPolicyViolationTypeNotSet                       ContentSecurityPolicyViolationType = ""
	ContentSecurityPolicyViolationTypeKInlineViolation             ContentSecurityPolicyViolationType = "kInlineViolation"
	ContentSecurityPolicyViolationTypeKEvalViolation               ContentSecurityPolicyViolationType = "kEvalViolation"
	ContentSecurityPolicyViolationTypeKURLViolation                ContentSecurityPolicyViolationType = "kURLViolation"
	ContentSecurityPolicyViolationTypeKTrustedTypesSinkViolation   ContentSecurityPolicyViolationType = "kTrustedTypesSinkViolation"
	ContentSecurityPolicyViolationTypeKTrustedTypesPolicyViolation ContentSecurityPolicyViolationType = "kTrustedTypesPolicyViolation"
)

func (e ContentSecurityPolicyViolationType) Valid() bool {
	switch e {
	case "kInlineViolation", "kEvalViolation", "kURLViolation", "kTrustedTypesSinkViolation", "kTrustedTypesPolicyViolation":
		return true
	default:
		return false
	}
}

func (e ContentSecurityPolicyViolationType) String() string {
	return string(e)
}

// SourceCodeLocation
type SourceCodeLocation struct {
	ScriptID     *runtime.ScriptID `json:"scriptId,omitempty"` // No description.
	URL          string            `json:"url"`                // No description.
	LineNumber   int               `json:"lineNumber"`         // No description.
	ColumnNumber int               `json:"columnNumber"`       // No description.
}

// ContentSecurityPolicyIssueDetails
type ContentSecurityPolicyIssueDetails struct {
	BlockedURL                         *string                            `json:"blockedURL,omitempty"`               // The url not included in allowed sources.
	ViolatedDirective                  string                             `json:"violatedDirective"`                  // Specific directive that is violated, causing the CSP issue.
	IsReportOnly                       bool                               `json:"isReportOnly"`                       // No description.
	ContentSecurityPolicyViolationType ContentSecurityPolicyViolationType `json:"contentSecurityPolicyViolationType"` // No description.
	FrameAncestor                      *AffectedFrame                     `json:"frameAncestor,omitempty"`            // No description.
	SourceCodeLocation                 *SourceCodeLocation                `json:"sourceCodeLocation,omitempty"`       // No description.
	ViolatingNodeID                    *dom.BackendNodeID                 `json:"violatingNodeId,omitempty"`          // No description.
}

// SharedArrayBufferIssueType
type SharedArrayBufferIssueType string

// SharedArrayBufferIssueType as enums.
const (
	SharedArrayBufferIssueTypeNotSet        SharedArrayBufferIssueType = ""
	SharedArrayBufferIssueTypeTransferIssue SharedArrayBufferIssueType = "TransferIssue"
	SharedArrayBufferIssueTypeCreationIssue SharedArrayBufferIssueType = "CreationIssue"
)

func (e SharedArrayBufferIssueType) Valid() bool {
	switch e {
	case "TransferIssue", "CreationIssue":
		return true
	default:
		return false
	}
}

func (e SharedArrayBufferIssueType) String() string {
	return string(e)
}

// SharedArrayBufferIssueDetails Details for a issue arising from an SAB being
// instantiated in, or transferred to a context that is not cross-origin
// isolated.
type SharedArrayBufferIssueDetails struct {
	SourceCodeLocation SourceCodeLocation         `json:"sourceCodeLocation"` // No description.
	IsWarning          bool                       `json:"isWarning"`          // No description.
	Type               SharedArrayBufferIssueType `json:"type"`               // No description.
}

// TwaQualityEnforcementViolationType
type TwaQualityEnforcementViolationType string

// TwaQualityEnforcementViolationType as enums.
const (
	TwaQualityEnforcementViolationTypeNotSet              TwaQualityEnforcementViolationType = ""
	TwaQualityEnforcementViolationTypeKHttpError          TwaQualityEnforcementViolationType = "kHttpError"
	TwaQualityEnforcementViolationTypeKUnavailableOffline TwaQualityEnforcementViolationType = "kUnavailableOffline"
	TwaQualityEnforcementViolationTypeKDigitalAssetLinks  TwaQualityEnforcementViolationType = "kDigitalAssetLinks"
)

func (e TwaQualityEnforcementViolationType) Valid() bool {
	switch e {
	case "kHttpError", "kUnavailableOffline", "kDigitalAssetLinks":
		return true
	default:
		return false
	}
}

func (e TwaQualityEnforcementViolationType) String() string {
	return string(e)
}

// TrustedWebActivityIssueDetails
type TrustedWebActivityIssueDetails struct {
	URL            string                             `json:"url"`                      // The url that triggers the violation.
	ViolationType  TwaQualityEnforcementViolationType `json:"violationType"`            // No description.
	HTTPStatusCode *int                               `json:"httpStatusCode,omitempty"` // No description.
	PackageName    *string                            `json:"packageName,omitempty"`    // The package name of the Trusted Web Activity client app. This field is only used when violation type is kDigitalAssetLinks.
	Signature      *string                            `json:"signature,omitempty"`      // The signature of the Trusted Web Activity client app. This field is only used when violation type is kDigitalAssetLinks.
}

// LowTextContrastIssueDetails
type LowTextContrastIssueDetails struct {
	ViolatingNodeID       dom.BackendNodeID `json:"violatingNodeId"`       // No description.
	ViolatingNodeSelector string            `json:"violatingNodeSelector"` // No description.
	ContrastRatio         float64           `json:"contrastRatio"`         // No description.
	ThresholdAA           float64           `json:"thresholdAA"`           // No description.
	ThresholdAAA          float64           `json:"thresholdAAA"`          // No description.
	FontSize              string            `json:"fontSize"`              // No description.
	FontWeight            string            `json:"fontWeight"`            // No description.
}

// CORSIssueDetails Details for a CORS related issue, e.g. a warning or error
// related to CORS RFC1918 enforcement.
type CORSIssueDetails struct {
	CORSErrorStatus        network.CORSErrorStatus      `json:"corsErrorStatus"`                  // No description.
	IsWarning              bool                         `json:"isWarning"`                        // No description.
	Request                AffectedRequest              `json:"request"`                          // No description.
	ResourceIPAddressSpace *network.IPAddressSpace      `json:"resourceIPAddressSpace,omitempty"` // No description.
	ClientSecurityState    *network.ClientSecurityState `json:"clientSecurityState,omitempty"`    // No description.
}

// InspectorIssueCode A unique identifier for the type of issue. Each type may
// use one of the optional fields in InspectorIssueDetails to convey more
// specific information about the kind of issue.
type InspectorIssueCode string

// InspectorIssueCode as enums.
const (
	InspectorIssueCodeNotSet                     InspectorIssueCode = ""
	InspectorIssueCodeSameSiteCookieIssue        InspectorIssueCode = "SameSiteCookieIssue"
	InspectorIssueCodeMixedContentIssue          InspectorIssueCode = "MixedContentIssue"
	InspectorIssueCodeBlockedByResponseIssue     InspectorIssueCode = "BlockedByResponseIssue"
	InspectorIssueCodeHeavyAdIssue               InspectorIssueCode = "HeavyAdIssue"
	InspectorIssueCodeContentSecurityPolicyIssue InspectorIssueCode = "ContentSecurityPolicyIssue"
	InspectorIssueCodeSharedArrayBufferIssue     InspectorIssueCode = "SharedArrayBufferIssue"
	InspectorIssueCodeTrustedWebActivityIssue    InspectorIssueCode = "TrustedWebActivityIssue"
	InspectorIssueCodeLowTextContrastIssue       InspectorIssueCode = "LowTextContrastIssue"
	InspectorIssueCodeCORSIssue                  InspectorIssueCode = "CorsIssue"
)

func (e InspectorIssueCode) Valid() bool {
	switch e {
	case "SameSiteCookieIssue", "MixedContentIssue", "BlockedByResponseIssue", "HeavyAdIssue", "ContentSecurityPolicyIssue", "SharedArrayBufferIssue", "TrustedWebActivityIssue", "LowTextContrastIssue", "CorsIssue":
		return true
	default:
		return false
	}
}

func (e InspectorIssueCode) String() string {
	return string(e)
}

// InspectorIssueDetails This struct holds a list of optional fields with
// additional information specific to the kind of issue. When adding a new
// issue code, please also add a new optional field to this type.
type InspectorIssueDetails struct {
	SameSiteCookieIssueDetails        *SameSiteCookieIssueDetails        `json:"sameSiteCookieIssueDetails,omitempty"`        // No description.
	MixedContentIssueDetails          *MixedContentIssueDetails          `json:"mixedContentIssueDetails,omitempty"`          // No description.
	BlockedByResponseIssueDetails     *BlockedByResponseIssueDetails     `json:"blockedByResponseIssueDetails,omitempty"`     // No description.
	HeavyAdIssueDetails               *HeavyAdIssueDetails               `json:"heavyAdIssueDetails,omitempty"`               // No description.
	ContentSecurityPolicyIssueDetails *ContentSecurityPolicyIssueDetails `json:"contentSecurityPolicyIssueDetails,omitempty"` // No description.
	SharedArrayBufferIssueDetails     *SharedArrayBufferIssueDetails     `json:"sharedArrayBufferIssueDetails,omitempty"`     // No description.
	TwaQualityEnforcementDetails      *TrustedWebActivityIssueDetails    `json:"twaQualityEnforcementDetails,omitempty"`      // No description.
	LowTextContrastIssueDetails       *LowTextContrastIssueDetails       `json:"lowTextContrastIssueDetails,omitempty"`       // No description.
	CORSIssueDetails                  *CORSIssueDetails                  `json:"corsIssueDetails,omitempty"`                  // No description.
}

// InspectorIssue An inspector issue reported from the back-end.
type InspectorIssue struct {
	Code    InspectorIssueCode    `json:"code"`    // No description.
	Details InspectorIssueDetails `json:"details"` // No description.
}
